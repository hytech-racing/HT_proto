syntax = "proto3";
package hytech_msgs;
import "base_msgs.proto";

message MCUProtoVersion
{
    string proto_version = 1;
}

message VCRProtoVersion
{
    string proto_version = 1;
}

message VCFProtoVersion
{
    string proto_version = 1;
}

message DBProtoVersion
{
    string proto_version = 1;
}

message Versions {
    uint32 ht_can_version = 1;
    string ht_proto_version = 2;
}

message SpeedControlIn {
    float accel_percent = 1;
    float brake_percent = 2;
}

message MCUOutputData
{
    float accel_percent = 1;
    float brake_percent = 2;
    veh_vec_float rpm_data = 3;
    int64 MCU_recv_millis = 4;
    float steering_angle_deg = 5;
    veh_vec_int load_cell_data = 6;
    bool timing_failure_active = 7;
    int32 round_trip_time_millis = 8;
}

message MCUCommandData
{
    veh_vec_float desired_rpms = 1;
    veh_vec_float torque_limit_nm = 2;
    int64 prev_MCU_recv_millis = 3;
}

message VNData
{
    xyz_vector vn_vel_m_s = 1;
    xyz_vector vn_linear_accel_m_ss = 2;
    xyz_vector vn_linear_accel_uncomp_m_ss = 3;
    xyz_vector vn_angular_rate_rad_s = 4;
    ypr_vector vn_ypr_rad = 5;
    GPS_data vn_gps = 6;
    vn_status status = 7;
}

message WeighScaleData
{
    float weight_lf = 1;
    float weight_rf = 2;
    float weight_lr = 3;
    float weight_rr = 4;
}

message VehicleData
{
    bool is_ready_to_drive = 1;
    SpeedControlIn current_inputs = 2;
    xyz_vector current_body_vel_ms = 3;
    xyz_vector current_body_accel_mss = 4;
    xyz_vector current_angular_rate_rads = 5;
    ypr_vector current_ypr_rad = 6;
    veh_vec_float current_rpms = 7;
    bool state_is_valid = 8;
    int64 prev_MCU_recv_millis = 9;
    float steering_angle_deg = 10;
    TireDynamics tire_dynamics = 11;
    veh_vec_float driver_torque = 12;
    float v_y_lm = 13;
    float psi_dot_lm_rad_s = 14;
    TorqueVectoringStatus tv_status = 15;
    PowerLimitStatus power_limit_status = 16;
    float electrical_power_watts = 17;
    bool is_using_torque_controller = 18;
    veh_vec_float suspension_potentiometers_mm = 19;
}

message SpeedTechLapTime
{
    float laptime = 1;
    int64 lapcount = 2;
}


//define structs 

/**
 * All system AND interface data in VCF. VCF systems will place data in some of the nested structs, while
 * systems will place data in some of the other structs.
 */
message VCFData_s
{
    FrontLoadCellData_s front_loadcell_data = 1;
    FrontSusPotData_s front_suspot_data = 2;
    SteeringSensorData_s steering_data = 3;
    DashInputState_s dash_input_state = 4; // Direct button signals from the dashboard IOExpander
    VCFEthernetLinkData_s vcf_ethernet_link_data = 5;
    PedalsSystemData_s pedals_system_data = 6;
    FWVersionInfo_s firmware_version_info = 7;
    Versions msg_versions = 8;
}

message FWVersionInfo_s
{
    string git_hash = 1;
    bool project_on_main_or_master = 2;
    bool project_is_dirty = 3;
}

/**
 * All Status and State Data in VCR. Contains system level states including that in Vehicle and Drivetrain SM.
 * Also contains interface level comm status of interfaces, including pedals.
 */
message VCRStatus
{
    string vehicle_state = 1;
    string drivetrain_state = 2;
    bool pedals_heartbeat_ok = 3;
}

/**
 * All system AND interface data in VCR. VCR systems will place data in some of the nested structs, while
 * systems will place data in some of the other nested structs.
 */
message VCRData_s
{
    RearLoadCellData_s rear_loadcell_data = 1;
    RearSusPotData_s rear_suspot_data = 2;
    ShutdownSensingData_s shutdown_sensing_data = 3;
    VCREthernetLinkData_s ethernet_is_linked = 4;
    veh_vec_inverter inverter_data = 5;
    CurrentSensorData_s current_sensor_data = 6;
    DrivetrainDynamicReport_s drivetrain_data = 9;
    bool buzzer_is_active = 10;
    TorqueControllerMuxStatus_s tcmux_status = 11;
    FWVersionInfo_s firmware_version_info = 12;
    Versions msg_versions = 13;
    float measured_glv = 14;
    VCRStatus status = 15;
}

/**
 * Minimum data that the ACU must send for the car to run. Detailed temps/voltages are not minimum-viable. The
 * ACUAllData message contains an instance of the data in this ACUCoreData struct.
 */
message ACUCoreData
{
    float pack_voltage = 1;
    float min_cell_voltage = 2;
    float avg_cell_voltage = 3;
    float max_cell_voltage = 4;
    float max_cell_temp = 5;
    float max_board_temp = 6;
    float measured_pack_voltage = 7; // sensed by ACU's internal ADC - measured pack out voltage
    float measured_tractive_system_voltage = 8; // sensed by ACU's internal ADC - measured tractive system voltage
    float measured_glv = 9; // measured global low voltage from teensy
}

/**
 * ACUAllData contains the detailed, unprocessed data from ACU sensors.
 */
message ACUAllData
{
    ACUCoreData core_data = 1; 
    uint32 max_consecutive_invalid_packet_count = 2; // maximum consecutive invalid packet count across all chips
    uint32 max_cell_voltage_id = 3; // refer to this bookstack page for reference about translating id to location: https://wiki.hytechracing.org/books/ht09-design/page/ht09-ams-isospi-bus-bar-layout-in-accumulator-Du5
    uint32 min_cell_voltage_id = 4; // see max_cell_voltage_id docs
    uint32 max_cell_temp_id = 5; // see max_cell_voltage_id docs
    float measured_bspd_current = 8; // measured bspd current
    FWVersionInfo_s firmware_version_info = 9;
    float valid_packet_rate = 10; // percentage of packets that are valid - given from 0.0 to 1.0
    float SoC = 11; // calculated state of charge / battery percentage - given from 0.0 to 1.0
    float SoH = 12; // calculated state of health of battery pack - given from 0.0 to 1.0
    Versions msg_versions = 17;
    repeated float cell_voltages = 13;
    repeated float cell_temperatures = 14;
    repeated float board_temperatures = 15;
    repeated uint32 invalid_packet_chip_counts = 16; // consecutive number of invalid packets received per chip
}

message AeroData {
    repeated float readings_pa = 1;
}